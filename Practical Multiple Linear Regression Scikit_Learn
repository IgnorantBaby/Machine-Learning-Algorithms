#Python code

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

# Reading CSV Data file
raw_data = pd.read_csv('C:/Users/YAQABIZO/Desktop/ML notes/1.04. Real-life example.csv')

# Cleaning Data: remove null values, unwanted columns, check normality, outliers etc
data = raw_data.drop(['Model'], axis=1)
data_no_mv = data.dropna(axis=0)

#plot
sns.distplot(data_no_mv['Price'])  

# removing outliers
q = data_no_mv['Price'].quantile(0.99)
data1 = data_no_mv[data_no_mv['Price'] < q]
sns.distplot(data1['Price'])  

q = data1['Mileage'].quantile(0.99)
data2 = data1[data1['Mileage'] < q]
sns.distplot(data2['Mileage']) 

data3 = data2[data2['EngineV'] < 6.5]
sns.distplot(data3['EngineV']) 

q = data3['Year'].quantile(0.01)
data4 = data3[data3['Year'] > q]
sns.distplot(data4['Year']) 

#reset Index
data_clean = data4.reset_index(drop=True)
data_clean.describe()
sns.pairplot(data_clean)

# Log Transformation on Target
log_price = np.log(data_clean['Price'])
data_clean['Log_Price'] = log_price
data_clean = data_clean.drop('Price',1)
sns.pairplot(data_clean)

# Checking Multicollinearity by variance_inflation_factor
data_clean.corr()
from statsmodels.stats.outliers_influence import variance_inflation_factor
variables = data_clean[['Mileage','Year','EngineV']]
vif = pd.DataFrame()
vif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]
vif['Features'] = variables.columns
data_no_mlco = data_clean.drop(['Year'],1)

# Create dummies for Categorical Data
data_with_dummies = pd.get_dummies(data_no_mlco, drop_first=True)

# Rearrange columns
data_with_dummies.columns.values
col = ['Log_Price', 'Mileage', 'EngineV', 'Brand_BMW',
       'Brand_Mercedes-Benz', 'Brand_Mitsubishi', 'Brand_Renault',
       'Brand_Toyota', 'Brand_Volkswagen', 'Body_hatch', 'Body_other',
       'Body_sedan', 'Body_vagon', 'Body_van', 'Engine Type_Gas',
       'Engine Type_Other', 'Engine Type_Petrol', 'Registration_yes']
data_preprocessed = data_with_dummies[col]

# Linear Regression Model
targets = data_preprocessed['Log_Price']
inputs = data_preprocessed.drop(['Log_Price'],axis=1)

# Standardization/Feature scaling of Inputs/Features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(inputs)
input_scaled = scaler.transform(inputs)

# Train Test Split Data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(input_scaled, targets, test_size=0.2, random_state=365)

# Regression with Scaled Features
reg = LinearRegression()
reg.fit(X_train, y_train)

# checking regression result
yhat = reg.predict(X_train)
plt.scatter(y_train, yhat)
sns.distplot(y_train - yhat)

# R-square, coefficients, intercepts, adjusted R-Squared
Rsquare = reg.score(X_train, y_train)
Coefficients = reg.coef_
Intercepts = reg.intercept_

# Testing Data
y_hat_test = reg.predict(X_test)
plt.scatter(y_test, y_hat_test)
sns.distplot(y_test - y_hat_test)
