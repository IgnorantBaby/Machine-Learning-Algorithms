#Python code



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load MNIST dataset
from tensorflow.keras.datasets import mnist
(X_train, y_train) , (X_test, y_test) = mnist.load_data()

X_train.shape
image0 = X_train[0]
image0.shape
plt.imshow(image0)

# one hot encoding in tensorflow.keras with Example
from tensorflow.keras.utils import to_categorical
y_example = to_categorical(y_train)
y_cat_test = to_categorical(y_test, num_classes=10)
y_cat_train = to_categorical(y_train, num_classes=10)

# Standardizing the inputs between 0-1
X_train = X_train/255
X_test = X_test/255

# adding dimention for rgb channel * in this case its value is 1
# batch_size, the_width, the_height, color_channels
X_train = X_train.reshape(60000,28,28,1)
X_test = X_test.reshape(10000,28,28,1)

# Creating CNN model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten

model = Sequential()
# Convolutional Layer
model.add(Conv2D(filters=32, kernel_size=(4,4), strides=(1,1), padding='valid',
                 activation='relu', input_shape=(28,28,1)))
# Pooling Layer
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(128, activation='relu'))

# Output layer softmax activation function for Multi-layer
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# EarlyStopping
from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor='val_loss', patience=1, mode='min')

# Fitting the model
model.fit(X_train, y_cat_train, epochs=10, validation_data=(X_test, y_cat_test),
          callbacks=[early_stop])

# Evaluating Model
loss_df = pd.DataFrame(model.history.history)
loss_df[['loss', 'val_loss']].plot()
loss_df[['accuracy', 'val_accuracy']].plot()

# Predicting the model
predictions = model.predict_classes(X_test)

# Classification report
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, predictions)) 
print(confusion_matrix(y_test, predictions))
plt.figure(figsize=(10,6))
sns.heatmap(confusion_matrix(y_test, predictions), annot=True)

my_number = X_test[0]
plt.imshow(my_number.reshape(28,28))

# predicting new Data
# num_images, width, height, color_channels
model.predict_classes(my_number.reshape(1,28,28,1))
